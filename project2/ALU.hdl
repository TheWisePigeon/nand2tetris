/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //Handling ZX and ZY
    Mux16(a=x, b=false, sel=zx, out=zeroX);
    Mux16(a=y, b=false, sel=zy, out=zeroY);

    //Handling NX and NY
    Not16(in=zeroX, out=notX);
    Mux16(a=zeroX, b=notX, sel=nx, out=processedX);
    Not16(in=zeroY, out=notY);
    Mux16(a=zeroY, b=notY, sel=ny, out=processedY);

    //Handling f flag
    Add16(a=processedX, b =processedY, out=xAdd16y);
    And16(a=processedX, b=processedY, out=xAnd16y);
    Mux16(a=xAnd16y, b=xAdd16y, sel=f, out=fOperationOutput);
    
    //Handling no flag and ng
    Not16(in=fOperationOutput, out=notfOperationOutput);
    Mux16(a=fOperationOutput, b=notfOperationOutput, sel=no, out=out, out[15]=ng, out[0..7]=outLSP, out[8..15]=outMSP);
    Or8Way(in=outLSP, out=or8Way1Out);
    Or8Way(in=outMSP, out=or8Way2Out);
    Or(a=or8Way1Out, b=or8Way2Out, out=zr);
}
